{"version":3,"sources":["@photo-sphere-viewer/core","three","src/index.ts","src/GyroscopeButton.ts","src/compass.svg","src/events.ts","src/GyroscopePlugin.ts","src/DeviceOrientationControls.js"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = THREE","import { DEFAULTS, registerButton } from '@photo-sphere-viewer/core';\nimport { GyroscopeButton } from './GyroscopeButton';\nimport * as events from './events';\n\nDEFAULTS.lang[GyroscopeButton.id] = 'Gyroscope';\nregisterButton(GyroscopeButton, 'caption:right');\n\nexport { GyroscopePlugin } from './GyroscopePlugin';\nexport * from './model';\nexport { events };\n","import type { Navbar } from '@photo-sphere-viewer/core';\nimport { AbstractButton } from '@photo-sphere-viewer/core';\nimport compass from './compass.svg';\nimport { GyroscopeUpdatedEvent } from './events';\nimport type { GyroscopePlugin } from './GyroscopePlugin';\n\nexport class GyroscopeButton extends AbstractButton {\n    static override readonly id = 'gyroscope';\n\n    private readonly plugin: GyroscopePlugin;\n\n    /**\n     * @param {PSV.components.Navbar} navbar\n     */\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-gyroscope-button',\n            icon: compass,\n            hoverScale: true,\n            collapsable: true,\n            tabbable: true,\n        });\n\n        this.plugin = this.viewer.getPlugin('gyroscope');\n\n        if (this.plugin) {\n            this.plugin.addEventListener(GyroscopeUpdatedEvent.type, this);\n        }\n    }\n\n    override destroy() {\n        if (this.plugin) {\n            this.plugin.removeEventListener(GyroscopeUpdatedEvent.type, this);\n        }\n\n        super.destroy();\n    }\n\n    override isSupported() {\n        return !this.plugin ? false : { initial: false, promise: this.plugin.isSupported() };\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof GyroscopeUpdatedEvent) {\n            this.toggleActive(e.gyroscopeEnabled);\n        }\n    }\n\n    /**\n     * Toggles gyroscope control\n     */\n    onClick() {\n        this.plugin.toggle();\n    }\n}\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M50 0a50 50 0 1 0 0 100A50 50 0 0 0 50 0zm0 88.81a38.86 38.86 0 0 1-38.81-38.8 38.86 38.86 0 0 1 38.8-38.82A38.86 38.86 0 0 1 88.82 50 38.87 38.87 0 0 1 50 88.81z\"/><path fill=\"currentColor\" d=\"M72.07 25.9L40.25 41.06 27.92 74.12l31.82-15.18v-.01l12.32-33.03zM57.84 54.4L44.9 42.58l21.1-10.06-8.17 21.9z\"/><!--Created by iconoci from the Noun Project--></svg>","import { TypedEvent } from '@photo-sphere-viewer/core';\nimport type { GyroscopePlugin } from './GyroscopePlugin';\n\n/**\n * @event Triggered when the gyroscope control is enabled/disabled\n */\nexport class GyroscopeUpdatedEvent extends TypedEvent<GyroscopePlugin> {\n    static override readonly type = 'gyroscope-updated';\n    override type: 'gyroscope-updated';\n\n    /** @internal */\n    constructor(public readonly gyroscopeEnabled: boolean) {\n        super(GyroscopeUpdatedEvent.type);\n    }\n}\n\nexport type GyroscopePluginEvents = GyroscopeUpdatedEvent;\n","import type { Position, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractConfigurablePlugin, events, utils } from '@photo-sphere-viewer/core';\nimport { Object3D, Vector3 } from 'three';\nimport { DeviceOrientationControls } from './DeviceOrientationControls';\nimport { GyroscopePluginEvents, GyroscopeUpdatedEvent } from './events';\nimport { GyroscopePluginConfig } from './model.js';\n\nconst getConfig = utils.getConfigParser<GyroscopePluginConfig>(\n    {\n        touchmove: true,\n        roll: true,\n        absolutePosition: false,\n        moveMode: 'smooth',\n    },\n    {\n        moveMode(moveMode, { defValue }) {\n            if (moveMode !== 'smooth' && moveMode !== 'fast') {\n                utils.logWarn(`GyroscopePlugin: invalid moveMode`);\n                return defValue;\n            } else {\n                return moveMode;\n            }\n        },\n    }\n);\n\nconst direction = new Vector3();\n\n/**\n * Adds gyroscope controls on mobile devices\n */\nexport class GyroscopePlugin extends AbstractConfigurablePlugin<\n    GyroscopePluginConfig,\n    GyroscopePluginConfig,\n    GyroscopePluginConfig,\n    GyroscopePluginEvents\n> {\n    static override readonly id = 'gyroscope';\n    static override readonly VERSION = PKG_VERSION;\n    static override readonly configParser = getConfig;\n\n    private readonly state = {\n        isSupported: this.__checkSupport(),\n        alphaOffset: 0,\n        enabled: false,\n        config_moveInertia: true,\n        moveMode: this.config.moveMode,\n    };\n\n    private controls: DeviceOrientationControls;\n\n    constructor(viewer: Viewer, config: GyroscopePluginConfig) {\n        super(viewer, config);\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        this.viewer.addEventListener(events.StopAllEvent.type, this);\n        this.viewer.addEventListener(events.BeforeRotateEvent.type, this);\n        this.viewer.addEventListener(events.BeforeRenderEvent.type, this);\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(events.StopAllEvent.type, this);\n        this.viewer.removeEventListener(events.BeforeRotateEvent.type, this);\n        this.viewer.removeEventListener(events.BeforeRenderEvent.type, this);\n\n        this.stop();\n\n        delete this.controls;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.StopAllEvent) {\n            this.stop();\n        } else if (e instanceof events.BeforeRenderEvent) {\n            this.__onBeforeRender();\n        } else if (e instanceof events.BeforeRotateEvent) {\n            this.__onBeforeRotate(e as events.BeforeRotateEvent);\n        }\n    }\n\n    /**\n     * Checks if the gyroscope is supported\n     */\n    isSupported(): Promise<boolean> {\n        return this.state.isSupported;\n    }\n\n    /**\n     * Checks if the gyroscope is enabled\n     */\n    isEnabled(): boolean {\n        return this.state.enabled;\n    }\n\n    /**\n     * Enables the gyroscope navigation if available\n     */\n    start(moveMode = this.config.moveMode): Promise<void> {\n        return this.state.isSupported\n            .then((supported) => {\n                if (supported) {\n                    return this.__requestPermission();\n                } else {\n                    utils.logWarn('gyroscope not available');\n                    return Promise.reject();\n                }\n            })\n            .then((granted) => {\n                if (granted) {\n                    return Promise.resolve();\n                } else {\n                    utils.logWarn('gyroscope not allowed');\n                    return Promise.reject();\n                }\n            })\n            .then(() => {\n                this.viewer.stopAll();\n\n                this.state.moveMode = moveMode;\n\n                // disable inertia\n                this.state.config_moveInertia = this.viewer.config.moveInertia;\n                this.viewer.config.moveInertia = false;\n\n                // enable gyro controls\n                if (!this.controls) {\n                    this.controls = new DeviceOrientationControls(new Object3D());\n                } else {\n                    this.controls.connect();\n                }\n\n                // force reset\n                this.controls.deviceOrientation = null;\n                this.controls.screenOrientation = 0;\n                this.controls.alphaOffset = 0;\n\n                this.state.alphaOffset = this.config.absolutePosition ? 0 : null;\n                this.state.enabled = true;\n\n                this.dispatchEvent(new GyroscopeUpdatedEvent(true));\n            });\n    }\n\n    /**\n     * Disables the gyroscope navigation\n     */\n    stop() {\n        if (this.isEnabled()) {\n            this.controls.disconnect();\n\n            this.state.enabled = false;\n            this.viewer.config.moveInertia = this.state.config_moveInertia;\n\n            if (this.config.roll) {\n                this.viewer.dynamics.roll.goto(0, 30);\n            }\n\n            this.dispatchEvent(new GyroscopeUpdatedEvent(false));\n\n            this.viewer.resetIdleTimer();\n        }\n    }\n\n    /**\n     * Enables or disables the gyroscope navigation\n     */\n    toggle() {\n        if (this.isEnabled()) {\n            this.stop();\n        } else {\n            this.start();\n        }\n    }\n\n    /**\n     * Handles gyro movements\n     */\n    private __onBeforeRender() {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        if (!this.controls.deviceOrientation) {\n            return;\n        }\n\n        const position = this.viewer.getPosition();\n\n        // on first run compute the offset depending on the current viewer position and device orientation\n        if (this.state.alphaOffset === null) {\n            if (this.controls.update()) {\n                this.controls.object.getWorldDirection(direction);\n\n                const sphericalCoords = this.viewer.dataHelper.vector3ToSphericalCoords(direction);\n                this.state.alphaOffset = sphericalCoords.yaw - position.yaw;\n            }\n        } else {\n            this.controls.alphaOffset = this.state.alphaOffset;\n            if (this.controls.update()) {\n                this.controls.object.getWorldDirection(direction);\n\n                const sphericalCoords = this.viewer.dataHelper.vector3ToSphericalCoords(direction);\n\n                const target: Position = {\n                    yaw: sphericalCoords.yaw,\n                    pitch: -sphericalCoords.pitch,\n                };\n\n                // having a slow speed on smalls movements allows to absorb the device/hand vibrations\n                const step = this.state.moveMode === 'smooth' ? 3 : 10;\n                this.viewer.dynamics.position.goto(target, utils.getAngle(position, target) < 0.01 ? 1 : step);\n\n                if (this.config.roll) {\n                    this.viewer.dynamics.roll.goto(-this.controls.object.rotation.z, this.state.moveMode === 'smooth' ? 10 : 30);\n                }\n            }\n        }\n    }\n\n    /**\n     * Intercepts moves and offsets the alpha angle\n     */\n    private __onBeforeRotate(e: events.BeforeRotateEvent) {\n        if (this.isEnabled()) {\n            e.preventDefault();\n\n            if (this.config.touchmove) {\n                this.state.alphaOffset -= e.position.yaw - this.viewer.getPosition().pitch;\n            }\n        }\n    }\n\n    /**\n     * Detects if device orientation is supported\n     */\n    private __checkSupport(): Promise<boolean> {\n        if (\n            'DeviceOrientationEvent' in window\n            && typeof (DeviceOrientationEvent as any).requestPermission === 'function'\n        ) {\n            return Promise.resolve(true);\n        } else if ('DeviceOrientationEvent' in window) {\n            return new Promise((resolve) => {\n                const listener = (e: DeviceOrientationEvent) => {\n                    resolve(!!e && !utils.isNil(e.alpha) && !isNaN(e.alpha));\n\n                    window.removeEventListener('deviceorientation', listener);\n                };\n\n                window.addEventListener('deviceorientation', listener, false);\n                setTimeout(listener, 10000);\n            });\n        } else {\n            return Promise.resolve(false);\n        }\n    }\n\n    /**\n     * Request permission to the motion API\n     */\n    private __requestPermission(): Promise<boolean> {\n        if (typeof (DeviceOrientationEvent as any).requestPermission === 'function') {\n            return (DeviceOrientationEvent as any)\n                .requestPermission()\n                .then((response: string) => response === 'granted')\n                .catch(() => false);\n        } else {\n            return Promise.resolve(true);\n        }\n    }\n}\n","import { Euler, MathUtils, Quaternion, Vector3 } from 'three';\n\nconst _zee = new Vector3(0, 0, 1);\nconst _euler = new Euler();\nconst _q0 = new Quaternion();\nconst _q1 = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)); // - PI/2 around the x-axis\n\n/**\n * Copied from three.js examples before deletion in r134\n * (deleted because of constructors/OS inconsistencies)\n * @internal\n */\nexport class DeviceOrientationControls {\n    constructor(object) {\n        if (window.isSecureContext === false) {\n            console.error(\n                'THREE.DeviceOrientationControls: DeviceOrientationEvent is only available in secure contexts (https)'\n            );\n        }\n\n        const scope = this;\n\n        const EPS = 0.000001;\n        const lastQuaternion = new Quaternion();\n\n        this.object = object;\n        this.object.rotation.reorder('YXZ');\n\n        this.enabled = true;\n\n        this.deviceOrientation = {};\n        this.screenOrientation = 0;\n\n        this.alphaOffset = 0; // radians\n\n        const onDeviceOrientationChangeEvent = function (event) {\n            scope.deviceOrientation = event;\n        };\n\n        const onScreenOrientationChangeEvent = function () {\n            scope.screenOrientation = window.orientation || 0;\n        };\n\n        // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n        const setObjectQuaternion = function (quaternion, alpha, beta, gamma, orient) {\n            _euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n            quaternion.setFromEuler(_euler); // orient the device\n\n            quaternion.multiply(_q1); // camera looks out the back of the device, not the top\n\n            quaternion.multiply(_q0.setFromAxisAngle(_zee, -orient)); // adjust for screen orientation\n        };\n\n        this.connect = function () {\n            onScreenOrientationChangeEvent(); // run once on load\n\n            // iOS 13+\n\n            if (\n                window.DeviceOrientationEvent !== undefined\n                && typeof window.DeviceOrientationEvent.requestPermission === 'function'\n            ) {\n                window.DeviceOrientationEvent.requestPermission()\n                    .then(function (response) {\n                        if (response == 'granted') {\n                            window.addEventListener('orientationchange', onScreenOrientationChangeEvent);\n                            window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent);\n                        }\n                    })\n                    .catch(function (error) {\n                        console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n                    });\n            } else {\n                window.addEventListener('orientationchange', onScreenOrientationChangeEvent);\n                window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent);\n            }\n\n            scope.enabled = true;\n        };\n\n        this.disconnect = function () {\n            window.removeEventListener('orientationchange', onScreenOrientationChangeEvent);\n            window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent);\n\n            scope.enabled = false;\n        };\n\n        this.update = function () {\n            if (scope.enabled === false) return false;\n\n            const device = scope.deviceOrientation;\n\n            if (device) {\n                if (!device.alpha && !device.beta && !device.gamma) {\n                    return false;\n                }\n\n                const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + scope.alphaOffset : 0; // Z\n\n                const beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n                const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n                const orient = scope.screenOrientation ? MathUtils.degToRad(scope.screenOrientation) : 0; // O\n\n                setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);\n\n                if (8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n                    lastQuaternion.copy(scope.object.quaternion);\n                }\n\n                return true;\n            }\n\n            return false;\n        };\n\n        this.dispose = function () {\n            scope.disconnect();\n        };\n\n        this.connect();\n    }\n}\n"],"mappings":"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","names":["import_core","import_core","import_core","import_three"]}